#!/usr/bin/env python3
'''
Created on 27.06.2012

@author: gschoenb
@version: 2.2
'''
import argparse
import logging
import sys

from perfTest.Devices import SSD
from perfTest.Devices import HDD
from perfTest.Devices import RAID
from perfTest.Options import Options
from perfTest.PerfTest import SsdPerfTest
from perfTest.PerfTest import HddPerfTest
import perfTest.PerfTest as pT
from system.Mail import Mail
from email.errors import MessageError

if __name__ == '__main__':
    tkPerfVersion = "TKperf Version: " + pT.__version__

    parser = argparse.ArgumentParser()
    parser.add_argument("mode", help="specify the test mode for the device", choices=["hdd","ssd","raid"])
    parser.add_argument("testname",help="name of the performance tests, corresponds to the result output filenames")
    parser.add_argument("device",help="device to run fio test on")

    parser.add_argument("-v","--version", help="get the version information", action='version',version=tkPerfVersion)
    parser.add_argument("-d","--debug", help="get detailed debug information",action ='store_true')
    parser.add_argument("-q","--quiet", help="turn off logging of info messages",action ='store_true')
    parser.add_argument("-nj","--numjobs",help="specify number of jobs for fio",type=int)
    parser.add_argument("-iod","--iodepth",help="specify iodepth for libaio used by fio",type=int)
    parser.add_argument("-rt","--runtime",help="specify the fio runtime of one test round, if not set this is 60 seconds",type=int)
    parser.add_argument("-trp","--tpramptime",help="specify the fio ramp_time of the first throughput write test round, if not set this is 30 seconds",type=int)
    parser.add_argument("-tr","--testrnds",help="specify the maximum number of test rounds in a test, if not set this is 25 rounds",type=int)
    parser.add_argument("-i","--interface",help="specify optional device interface",choices=["sas","nvme","fusion","usb","sdcard","compactflash"])
    parser.add_argument("-xml","--fromxml",help="don't run tests but load test objects from xml file",
                        action='store_true')
    parser.add_argument("-rfb","--refill_buffers",help="use Fio's refill buffers option to circumvent any compression of devices",
                        action='store_true')
    parser.add_argument("-dsc","--desc_file",help="use a description file for the tested device if hdparm doesn't work correctly",
                        type=argparse.FileType('r'))
    parser.add_argument("-c","--config",help="specify the config file for a raid device",
                        type=argparse.FileType('r'))
    parser.add_argument("-ft","--force_test",help="skip checks if the used device is mounted, don't print warnings and force starting the test",
                        action='store_true')
    parser.add_argument("-fm","--feature_matrix",help="add a feature matrix of the given device to the report",
                        type=argparse.FileType('r'))
    parser.add_argument("-hddt","--hdd_type",help="choose which tests are run",
                        choices=['iops','tp'],action='append',dest='hddt')
    parser.add_argument("-ssdt","--ssd_type",help="choose which tests are run",
                        choices=['iops','lat','tp','writesat'],action='append',dest='ssdt')
    parser.add_argument("-m","--mail",help="Send reports or errors to mail address, needs -s to be set")
    parser.add_argument("-s","--smtp",help="Use the specified smtp server to send mails, uses port 25 to connect")
    parser.add_argument("-g","--gen_report",help="Set and specify command to generate pdf report, e.g. rst2pdf")
    args = parser.parse_args()
    # Configure logging levels
    logformat = '%(asctime)s %(name)-8s %(levelname)-8s %(message)s'
    logdatefmt = '%Y%m%d %H:%M'
    if args.fromxml == False:
        logfile = args.testname+'.log'
    else:
        logfile = args.testname+'.xml.log'
    if args.debug == True:
        logging.basicConfig(filename=logfile,level=logging.DEBUG,format=logformat,datefmt=logdatefmt)
    if args.quiet == True:
        logging.basicConfig(filename=logfile,level=logging.WARNING,format=logformat,datefmt=logdatefmt)
    else:
        logging.basicConfig(filename=logfile,level=logging.INFO,format=logformat,datefmt=logdatefmt)
    # Create objects, a device and given options
    if args.mode == "ssd":
        devToTest = SSD(args.mode,args.device,args.testname)
    if args.mode == "hdd":
        devToTest = HDD(args.mode,args.device,args.testname)
    if args.mode == "raid":
        devToTest = RAID(args.mode,args.device,args.testname)
    if args.interface != None:
        devToTest.setInterface(args.interface)
    options = Options()
    if args.numjobs != None:
        options.setNj(args.numjobs)
    if args.iodepth != None:
        options.setIod(args.iodepth)
    if args.runtime != None:
        options.setRuntime(args.runtime)
    if args.tpramptime != None:
        options.setTPramptime(args.tpramptime)
    if args.testrnds != None:
        options.setTestRnds(args.testrnds)
    if args.refill_buffers == True:
        xargs = ['refill_buffers']
        options.setXargs(xargs)
    # Create performance test objects, don't yet init them
    if args.mode == "ssd" or args.mode == "raid":
        if args.ssdt != None:
            SsdPerfTest.testKeys = args.ssdt
        myTest = SsdPerfTest(args.testname, devToTest,options)
    if args.mode == "hdd":
        if args.hddt != None:
            HddPerfTest.testKeys = args.hddt
        myTest = HddPerfTest(args.testname, devToTest,options)
    # First check if we are loading values from a given xml
    if args.fromxml == True:
        print("Loading from xml file...")
        myTest.fromXml()
        myTest.genPlots()
        myTest.toRst()
        exit(0)
    # Start a real performance test
    try:
        # A raid test needs a raid config
        if args.mode == "raid":
            devToTest.setConfig(args.config)
        myTest.initialize()
    except RuntimeError:
        print("### Error! ###")
        print("Test initialization failed, please inspect the log file!")
        exit(1)
    # Keep used command line arguments
    myTest.readCmdLineArgs(sys.argv)
    # Check if a correct setup is given
    if (not devToTest.isInitialized()) and args.desc_file == None:
        print("### Error! ###")
        print("Please use a description file for the current device.")
        print("The information via hdparm -I is not reliable.")
        print("Use -dsc DESC_FILE to provide the information")
        exit(1)
    if args.desc_file != None:
        devToTest.readDevInfoFile(args.desc_file)
    if args.feature_matrix != None:
        devToTest.readFeatureFile(args.feature_matrix)
    # Don't print a warning if force test is given
    if args.force_test == False:
        if devToTest.isMounted():
            print("!!!WARNING!!!")
            print("You are testing a mounted device, this is highly dangerous!")
            exit(0)
        if devToTest.isAvailable():
            print("!!!Attention!!!")
            print("All data on " + args.device + " will be lost!")
            print("Are you sure you want to continue? (In case you really know what you are doing.)")
            print("Press 'y' to continue, any key to stop:")
            key = input()
            if key != 'y':
                exit(0)
        else:
            print("You are not using a valid device or partition!")
            exit(1)
    print("Starting "+args.mode+" mode...")
    print("Testing device:")
    print(devToTest.getDevInfo())
    try:
        myTest.run()
        if args.gen_report != None:
            try:
                myTest.getRstReport().toPDF(args.gen_report)
            except RuntimeError:
                print("### Error! ###")
                print("Generating PDF failed.")
        if args.mail != None and args.smtp != None:
            try:
                mail = Mail('TKperf message', 'root@tkperf.local', args.mail, args.smtp)
                mail.addMsg('Please find your TKperf report as attachment!')
                if args.gen_report != None:
                    mail.addPDFAttachment(args.testname+'.pdf')
                mail.addTextAttachment(args.testname+'.rst')
                mail.addXMLAttachment(args.testname+'.xml')
                mail.addTextAttachment(logfile)
                mail.send()
            except MessageError:
                print("### Error! ###")
                print("Creating and sending mail failed.")
    except RuntimeError:
        print("### Error! ###")
        print("Running the tests failed, please inspect the log file!")
        if args.mail != None and args.smtp != None:
            try:
                mail = Mail('TKperf message', 'root@tkperf.local', args.mail, args.smtp)
                mail.addMsg('A TKperf error occurred, please inspect the log file!')
                mail.addTextAttachment(logfile)
                mail.send()
            except MessageError:
                print("### Error! ###")
                print("Creating and sending mail failed.")
        exit(1)
